// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
  GUARD
}

enum QRStatus {
  ACTIVE
  USED
  REVOKED
  EXPIRED
}

enum AccessType {
  ISSUE
  VALIDATE_ALLOW
  VALIDATE_DENY
}

enum AccessState {
  INSIDE
  OUTSIDE
}

enum QRKind {
  ENTRY
  EXIT
}

model User {
  id          Int         @id @default(autoincrement())
  boleta      String?     @unique
  name        String
  firstName   String?
  lastNameP   String?
  lastNameM   String?
  email       String      @unique
  password    String
  role        Role        @default(USER)
  createdAt   DateTime    @default(now())
  isActive    Boolean     @default(true)
  accessState AccessState @default(OUTSIDE)

  qrPasses   QRPass[]
  accessLogs AccessLog[] @relation("AccessByUser")
  guardLogs  AccessLog[] @relation("ValidatedByGuard")

  @@index([email])
}

model GuestVisit {
  id        Int        @id @default(autoincrement())
  firstName String
  lastNameP String
  lastNameM String?
  curp      String
  reason    String
  state     GuestState @default(OUTSIDE)
  createdAt DateTime   @default(now())
  expiresAt DateTime?

  passes QRPass[]
  logs   AccessLog[] @relation("AccessByGuest")

  @@index([curp]) // << QUITAR @unique y dejarlo con Ã­ndice normal
}

enum GuestState {
  OUTSIDE
  INSIDE
  COMPLETED
}

model QRPass {
  id        Int         @id @default(autoincrement())
  code      String      @unique
  userId    Int?
  user      User?       @relation(fields: [userId], references: [id])
  guestId   Int?
  guest     GuestVisit? @relation(fields: [guestId], references: [id])
  kind      QRKind
  status    QRStatus    @default(ACTIVE)
  expiresAt DateTime?
  createdAt DateTime    @default(now())
  logs      AccessLog[] @relation("QRPassLogs")
}

model AccessLog {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation("AccessByUser", fields: [userId], references: [id])

  guestId Int?
  guest   GuestVisit? @relation("AccessByGuest", fields: [guestId], references: [id])

  qrId Int?
  qr   QRPass? @relation("QRPassLogs", fields: [qrId], references: [id])

  kind   QRKind?
  action AccessType

  guardId Int?
  guard   User? @relation("ValidatedByGuard", fields: [guardId], references: [id])

  createdAt DateTime @default(now())
}
